// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  userId   Int    @id @default(autoincrement()) @map("userId")
  id       String @unique @map("id")
  password String @map("password")
  cash     Int    @default(100000) @map("cash")
  mmr      Int    @default(1000) @map("mmr")
  stack    Int    @default(0) @map("stack")

  inventory Inventory[]
  Team      Team?

  matchResults1 MatchResult[] @relation("User1")
  matchResults2 MatchResult[] @relation("User2")

  @@map("Users")
}

model Inventory {
  inventoryId Int @id @default(autoincrement()) @map("inventoryId")
  userId      Int @map("userId")
  cardId      Int @map("cardId")
  upgrade     Int @default(0) @map("upgrade")

  users Users @relation(fields: [userId], references: [userId], onDelete: Cascade)
  cards Cards @relation(fields: [cardId], references: [cardId], onDelete: Cascade)

  team1 Team? @relation("Inventory1")
  team2 Team? @relation("Inventory2")
  team3 Team? @relation("Inventory3")

  @@map("Invertory")
}

model Cards {
  cardId  Int    @id @default(autoincrement()) @map("cardId")
  name    String @map("name")
  speed   Int    @map("speed")
  shoot   Int    @map("shoot")
  pass    Int    @map("pass")
  sight   Int    @map("sight")
  tackle  Int    @map("tackle")
  defence Int    @map("defence")
  grade   String @map("grade")

  inventory Inventory[]

  @@map("Cards")
}

model Team {
  teamId       Int @id @default(autoincrement()) @map("teamId")
  userId       Int @unique @map("userId")
  inventoryId1 Int? @unique @map("inventoryId1")
  inventoryId2 Int? @unique @map("inventoryId2")
  inventoryId3 Int? @unique @map("inventoryId3")

  inventory1 Inventory? @relation("Inventory1", fields: [inventoryId1], references: [inventoryId], onDelete: Cascade)
  inventory2 Inventory? @relation("Inventory2", fields: [inventoryId2], references: [inventoryId], onDelete: Cascade)
  inventory3 Inventory? @relation("Inventory3", fields: [inventoryId3], references: [inventoryId], onDelete: Cascade)
  users      Users     @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("Team")
}

model MatchResult {
  matchId Int @id @default(autoincrement()) @map("matchId")
  userId1 Int @map("userId1")
  userId2 Int @map("userid2")
  score1  Int @map("score1")
  score2  Int @map("score2")

  user1 Users @relation("User1", fields: [userId1], references: [userId], onDelete: Cascade)
  user2 Users @relation("User2", fields: [userId2], references: [userId], onDelete: Cascade)

  @@map("MatchResult")
}
